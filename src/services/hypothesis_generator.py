import pickle
from pathlib import Path
import networkx as nx

from src.agent.llm_agent import LLMReasoningAgent
from src.data.parser import build_gene_network
from src.data.indexer import create_combined_index
from src.config.settings import settings

# Define paths for cached files.
CACHE_DIR = Path("cache")
CACHE_DIR.mkdir(exist_ok=True)
INDEX_CACHE_FILE = CACHE_DIR / "combined_index.pkl"
NETWORK_CACHE_FILE = CACHE_DIR / "gene_network.pkl"

# Global variables for caching in-memory.
_index = None
_gene_network = None

def get_combined_index():
    """
    Retrieve or create the combined index from KEGG and GO data.

    Returns:
        VectorStoreIndex: The combined index used for querying biomedical data.
    """
    global _index
    if _index is None:
        if INDEX_CACHE_FILE.exists():
            with open(INDEX_CACHE_FILE, "rb") as f:
                _index = pickle.load(f)
        else:
            _index = create_combined_index(settings.kegg_data_dir, settings.go_data_dir)
            with open(INDEX_CACHE_FILE, "wb") as f:
                pickle.dump(_index, f)
    return _index

def get_gene_network():
    """
    Retrieve or build the gene interaction network from KEGG XML files.

    Returns:
        networkx.DiGraph: A directed graph representing gene interactions.
    """
    global _gene_network
    if _gene_network is None:
        if NETWORK_CACHE_FILE.exists():
            with open(NETWORK_CACHE_FILE, "rb") as f:
                _gene_network = pickle.load(f)
        else:
            _gene_network = nx.DiGraph()
            for file_path in settings.kegg_data_dir.glob("*.xml"):
                net = build_gene_network(str(file_path))
                _gene_network = nx.compose(_gene_network, net)
            with open(NETWORK_CACHE_FILE, "wb") as f:
                pickle.dump(_gene_network, f)
    return _gene_network

async def generate_hypothesis_from_question(question: str) -> str:
    """
    Generate a biomedical hypothesis from a user query by incorporating aggregated database
    context and gene network information.

    Args:
        question (str): The user's query or question.

    Returns:
        str: The hypothesis generated by the LLM reasoning agent.
    """
    index = get_combined_index()
    query_engine = index.as_query_engine()
    index_context = query_engine.query(question)
    network_context = "Note: A comprehensive gene interaction network is available for context if relevant."
    context = f"Aggregated Database Context: {index_context}\n{network_context}"
    agent = LLMReasoningAgent()
    return await agent.generate_hypothesis_async(question, context)